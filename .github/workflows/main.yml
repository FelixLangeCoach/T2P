name: T2P Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  checkstyle:
    name: checkstyle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run check style
        uses: nikitasavinov/checkstyle-action@0.6.0
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          level: warning
          checkstyle_config: google_checks.xml

  build:
    runs-on: ubuntu-latest
    permissions: write-all
    
    
    steps:
      - uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          settings-path: ${{ github.workspace }}

      - name: Build
        run: mvn clean install -Dmaven.test.skip=true
        
      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
        
      - name: If Version does contain SNAPSHOT add SHORT_SHA
        if: contains(env.RELEASE_VERSION, 'SNAPSHOT')     
        run: echo "DOCKER_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-${{ env.SHORT_SHA }}" >> $GITHUB_ENV
        
      - name: If Version does not contain SNAPSHOT add nothing
        if: false == contains(env.RELEASE_VERSION, 'SNAPSHOT')
        run: echo "DOCKER_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.workspace }}
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: master
          allowUpdates: 'true'
          tag: ${{ env.RELEASE_VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with: 
          version: v0.6.3
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: svenjung/t2p:${{ env.DOCKER_VERSION }}

build-linux-installer:
    name: Build Installer on Linux
    runs-on: ubuntu-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v2
    - id: setup-jdk
      name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 15

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build distribution
      run: |
        gradle -v
        gradle build
        jpackage --verbose "@jpackage.cfg" "@jpackage-linux.cfg"
# SAVE INSTALLER
    - id: upload-installer
      name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./consoleapp/build/distributions/consoleapp_0.0.1-1_amd64.deb
        name: linux-installer
        retention-days: 1


  build-windows-installer:
    name: Build Installer on Windows
    runs-on: windows-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v2
    - id: setup-jdk
      name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 15

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build distribution
      run: |
        gradle -v
        gradle build
        jpackage --verbose "@jpackage.cfg" "@jpackage-windows.cfg"
# SAVE INSTALLER
    - id: upload-installer
      name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./consoleapp/build/distributions/consoleapp-0.0.1.msi
        name: windows-installer
        retention-days: 1


  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux-installer, build-windows-installer]
    steps:

# DOWNLOAD INSTALLERS
    - id: download-linux-installer
      name: Download Linux installer
      uses: actions/download-artifact@v2
      with:
        name: linux-installer

    - id: download-windows-installer
      name: Download Windows installer
      uses: actions/download-artifact@v2
      with:
        name: windows-installer

    - id: rename-downloaded-files
      name: Rename downloaded files
      run: |
        ls -alR
        mv consoleapp_0.0.1-1_amd64.deb consoleapp-0.0.1.deb
        ls -alR
# CREATE GITHUB RELEASE AND ADD ASSETS
    - id: create-release
      name: Create GitHub release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ github.sha }}
        release_name: release-${{ github.sha }}
        draft: false
        prerelease: false
    - id: release-linux-installer
      name: Release Linux installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: consoleapp-0.0.1.deb
        asset_name: consoleapp-0.0.1.deb
        asset_content_type: application/x-binary
    - id: release-windows-installer
      name: Release Windows installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: consoleapp-0.0.1.msi
        asset_name: consoleapp-0.0.1.msi
        asset_content_type: application/x-binary